<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
    "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<?xml-stylesheet type="text/css" href="sdocbook.css"   ?>
<section> <sectioninfo><date> 1. June 2000 </date></sectioninfo>
<title> ZIP File Access </title>  <subtitle>Using Zipped Files Transparently </subtitle>

<!--border-->

<section>
<title>The Typedef</title>

<para>
 The typedef <literal>ZZIP_FILE</literal> can serve as a replacement 
 for a normal file descriptor. As long as it is only used
 for reading a file, the zzlib-user can actually replace
 the posix functions <literal>open/read/close</literal> 
 by their counterparts from the 
 <ulink url="zziplib.html">zziplib library</ulink>:
 <literal>zzip_open/zzip_read/zzip_close</literal>.
</para>
<para>
 As long as the filename path given to <literal>zzip_open</literal>
 refers to a real file in the filesystem, it will almost
 directly forward the call to the respective posix <literal>open</literal>
 call. The returned file descriptor is then stored in
 a member-variable of the <literal>ZZIP_FILE</literal> structure.
</para>
<para>
 Any subsequent calls to <literal>zzip_read</literal> will then
 be forwarded to the posix <literal>read</literal> call on the
 memorized file descriptor. The same about <literal>zzip_close</literal>
 which will call the posix <literal>close</literal> function and then
 <literal>free</literal> the <literal>ZZIP_FILE</literal> structure.
</para>
<para>
 The real benefit of the 
 <ulink url="zziplib.html">zziplib library</ulink>
 comes about when the filename argument does actually refer
 to a file that is zipped in a zip-archive. It happens that
 even both a real file and a zipped file can live under the
 same pathname given to the <literal>zzip_open</literal> call,
 whereas the real file is used in preference.
</para>

</section><section>
<title>Zipped File</title>

<para>
 Suppose you have subdirectory called '<constant>test/</constant>'. In
 this directory is just one file, called '<constant>README</constant>'.
 Calling the <literal>zzip_open</literal> function with an
 argument of '<emphasis>optional-path/</emphasis> <constant>test/README</constant>',
 then it will open that file for subsequent reading with
 <literal>zzip_read</literal>. In this case the real (<emphasis>stat'able</emphasis>)
 file is opened.
</para>
<para>
 Now you can go to the '<constant>test/</constant>' directory and zip up
 the files in there by calling 
 <cmdsynopsis><command>`zip ../test.zip *`</command></cmdsynopsis>.
 After this, you can delete the '<constant>test/</constant>' directory and
 the call to <literal>zzip_open</literal> will still succeed.
 The reason is that the part of the path saying 
 '<constant>test/README</constant>' will be replaced by sth. like 
 '<constant>test.zip:README</constant>' - that is the real file '<constant>test.zip</constant>'
 is opened and searched for a contained file '<constant>README</constant>'.
</para>
<para>
 Calling <literal>zzip_read</literal> on the zipped '<constant>README</constant>' file
 will return the very same data as if it is a real file in a
 real directory. If the zipped file is compressed it will be 
 decompressed on the fly.
</para>

</section><section>
<title>Zip Directory</title>

<para>
 The same applies to the use of <literal>opendir/readdir/closedir</literal>
 which can safely be replaced with their counterparts from the
 <ulink url="zziplib.html">zziplib library</ulink> - again their prototype
 follows the scheme of the original calls, just prepend <constant>zzip_</constant>
 to the function calls and <constant>ZZIP_</constant> to the struct-typedefs.
</para>
<para>
 To call <literal>zzip_opendir</literal> on a real directory will then
 return a <literal>ZZIP_DIR</literal> whose member-variable 
 <literal>realdir</literal> points to the actual <literal>DIR</literal>-structure
 returned by the underlying posix <literal>opendir</literal>-call.
</para>
<para>
 If a real directory '<constant>test</constant>' does not exist, then the
 <literal>zzip_opendir</literal> will try to open a file '<constant>test.zip</constant>'
 with a call to <literal>zzip_dir_open</literal>.
 Subsequent calls to <literal>zzip_readdir</literal> will then return
 information as being obtained from the central archive directory
 of the zip-file.
</para>

</section><section>
<title>Differences</title>

<para>
 There are no differences between the posix calls and their counterparts
 from the      <ulink url="zziplib.html">zziplib library</ulink> - well, just
 as long as the zip-file contains just the plain files from a directory.
</para>
<para>
 If the zip-file contains directory entries you may be prompted with
 some awkward behaviour, since in zip-file a directory happens to be
 just an empty file. Note that the posix function <literal>open</literal>
 may also open a directory for reading - it will only return 
 <literal>EISDIR</literal> if the <literal>open</literal> mode-argument included
 write-access.
</para>
<para>
 What the current of version of the 
 <ulink url="zziplib.html">zziplib library</ulink>
 can definitly not do: calling zzip_opendir on a directory zippend
 <emphasis>inside</emphasis> a zip-file.
</para>
<para>
 To prevent the enrollment of directories into the zip-archive, you
 can use the <constant>-D</constant> option of the <constant>zip</constant> program. That
 is in any <constant>Makefile</constant> you may want to use
 <cmdsynopsis><command>`cd $(dir) &amp;&amp; zip -D ../$(dir).zip *`</command></cmdsynopsis>.
</para> 

</section><section>
<title>Advantages</title>

<para>
 Distribution of a set of files is much easier if it just means
 to wrap up a group of files into a zip-archive - and copy that
 zip-archive to the respective destination directory.
 Even more the files can be compressed and unlike a <constant>tar.gz</constant>
 archive there is no need to decompress the archive in temporary
 location before accessing a member-file.
</para>
<para>
 On the other hand, there is no chance to scatter files around
 on the disk like it could easily happen with a set of gzip'ed
 man-pages in a single `<constant>man</constant>`-directory. The reader
 application does not specifically need to know that the file
 is compressed, so that reading a script like 
 `<constant>share/guile/x.x.x/ice-9/popen.scm</constant>` is done by simple
 calls to <literal>zzip_read</literal> which works on zip-file named
 `<constant>share/guile/x.x.x/ice-9.zip</constant>`.
</para>
<para>
 A version mismatch between different files in a group is now
 obvious: either the opened file belongs to the distribution
 archive, or otherwise in resides in a real directory <emphasis>just
 next to the zip-archive that contains the original</emphasis>.
</para>

</section><section>
<title>Issues</title>

<para>
 The  <ulink url="zziplib.html">zziplib library</ulink> does not
 use any code piece from the <literal>zip</literal> programs, neither
 <emphasis>pkzip</emphasis> nor <emphasis>infozip</emphasis>, so there is no license
 issue here. The decompression is done by using the free
 <ulink url="http://www.gzip.org/zlib">zlib library</ulink> which has no special
 issues with respect to licensing. 
 The  rights to the <ulink url="zziplib.html">zziplib library</ulink> 
 are reserved to the copyright holders, there is a public
 license that puts most the sources themselves under 
 <ulink url="COPYING.LIB">the GNU Lesser General Public License</ulink>,
 so that the use of a shared library instance of the
 <ulink url="zziplib.html">zziplib library</ulink>
 has no restrictions of interest to application programmers.
 For more details and hints about static linking, check
 the <ulink url="copying.html">COPYING</ulink> information.
</para>
<para>
 The only issue you have with the
 <ulink url="zziplib.html">zziplib library</ulink>
 is the fact that you can only <emphasis>read</emphasis> the contained files.
 Writing/Compression is not implemented. Even more, a compressed
 file is not seekable at the moment although I hope that someone
 will stand up to implement that functionality someday.
</para>

</section></section>
